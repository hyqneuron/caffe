name: "yq_fk3"
layer {
  name: "data"
  type: "ImageDataMultLabel"
  top: "data"
  top: "label_category"
  top: "label_pattern"
  top: "label_neck"
  top: "label_sleeve"
  top: "label_fit"
  top: "label_ideal_for"
  top: "label_occasion"
  top: "label_embellished"
  top: "label_embroidered"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_mult_label_param {
    source: "/mnt/images/training/flipkart_yq2set/train.txt"
    batch_size: 50
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "data"
  type: "ImageDataMultLabel"
  top: "data"
  top: "label_category"
  top: "label_pattern"
  top: "label_neck"
  top: "label_sleeve"
  top: "label_fit"
  top: "label_ideal_for"
  top: "label_occasion"
  top: "label_embellished"
  top: "label_embroidered"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_mult_label_param {
    source: "/mnt/images/training/flipkart_yq2set/test.txt"
    batch_size: 50
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
####category
layer {
  name: "fc8_category"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_category"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 26
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_category"
  type: "SoftmaxWithLoss"
  bottom: "fc8_category"
  bottom: "label_category"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_category"
  type: "PerClassAccuracy"
  bottom: "fc8_category"
  bottom: "label_category"
  #top: "accuracy_category"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_category.txt"
  }
}
####pattern
layer {
  name: "fc8_pattern"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_pattern"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 20
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pattern"
  type: "SoftmaxWithLoss"
  bottom: "fc8_pattern"
  bottom: "label_pattern"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_pattern"
  type: "PerClassAccuracy"
  bottom: "fc8_pattern"
  bottom: "label_pattern"
  #top: "accuracy_pattern"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_pattern.txt"
  }
}
####neck
layer {
  name: "fc8_neck"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_neck"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 23
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_neck"
  type: "SoftmaxWithLoss"
  bottom: "fc8_neck"
  bottom: "label_neck"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_neck"
  type: "PerClassAccuracy"
  bottom: "fc8_neck"
  bottom: "label_neck"
  #top: "accuracy_neck"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_neck.txt"
  }
}
####sleeve
layer {
  name: "fc8_sleeve"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_sleeve"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_sleeve"
  type: "SoftmaxWithLoss"
  bottom: "fc8_sleeve"
  bottom: "label_sleeve"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_sleeve"
  type: "PerClassAccuracy"
  bottom: "fc8_sleeve"
  bottom: "label_sleeve"
  #top: "accuracy_sleeve"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_sleeve.txt"
  }
}
####fit
layer {
  name: "fc8_fit"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_fit"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 26
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_fit"
  type: "SoftmaxWithLoss"
  bottom: "fc8_fit"
  bottom: "label_fit"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_fit"
  type: "PerClassAccuracy"
  bottom: "fc8_fit"
  bottom: "label_fit"
  #top: "accuracy_fit"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_fit.txt"
  }
}
####idea_for
layer {
  name: "fc8_ideal_for"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_ideal_for"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_ideal_for"
  type: "SoftmaxWithLoss"
  bottom: "fc8_ideal_for"
  bottom: "label_ideal_for"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_ideal_for"
  type: "PerClassAccuracy"
  bottom: "fc8_ideal_for"
  bottom: "label_ideal_for"
  #top: "accuracy_ideal_for"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_ideal_for.txt"
  }
}
####occasion
layer {
  name: "fc8_occasion"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_occasion"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 38
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_occasion"
  type: "SoftmaxWithLoss"
  bottom: "fc8_occasion"
  bottom: "label_occasion"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_occasion"
  type: "PerClassAccuracy"
  bottom: "fc8_occasion"
  bottom: "label_occasion"
  #top: "accuracy_occasion"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_occasion.txt"
  }
}
####embellished
layer {
  name: "fc8_embellished"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_embellished"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 38
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_embellished"
  type: "SoftmaxWithLoss"
  bottom: "fc8_embellished"
  bottom: "label_embellished"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_embellished"
  type: "PerClassAccuracy"
  bottom: "fc8_embellished"
  bottom: "label_embellished"
  #top: "accuracy_embellished"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_embellished.txt"
  }
}
####embroidered
layer {
  name: "fc8_embroidered"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc8_embroidered"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 38
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_embroidered"
  type: "SoftmaxWithLoss"
  bottom: "fc8_embroidered"
  bottom: "label_embroidered"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_embroidered"
  type: "PerClassAccuracy"
  bottom: "fc8_embroidered"
  bottom: "label_embroidered"
  #top: "accuracy_embroidered"
  include {
    phase: TEST
  }
  per_class_accuracy_param {
      ignore_label: 0
      classifier_info_file: "models/yq_fk3/info_embroidered.txt"
  }
}
