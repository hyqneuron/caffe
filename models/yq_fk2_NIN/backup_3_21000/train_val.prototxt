name: "nin_imagenet"
layer {
  name: "data"
  type: "ImageDataMultLabel"
  top: "data"
  top: "label_category"
  top: "label_pattern"
  top: "label_neck"
  top: "label_sleeve"
  top: "label_fit"
  top: "label_ideal_for"
  top: "label_occasion"
  transform_param {
    mirror: true
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_mult_label_param {
    source: "/mnt/images/training/flipkart_yq2set/train.txt"
    new_height: 256
    new_width: 256
    batch_size: 64
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "ImageDataMultLabel"
  top: "data"
  top: "label_category"
  top: "label_pattern"
  top: "label_neck"
  top: "label_sleeve"
  top: "label_fit"
  top: "label_ideal_for"
  top: "label_occasion"
  transform_param {
    mirror: false
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_mult_label_param {
    source: "/mnt/images/training/flipkart_yq2set/test.txt"
    batch_size: 64
    new_height: 256
    new_width: 256
  }
  include: { phase: TEST }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu0"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "cccp1"
  type: "Convolution"
  bottom: "conv1"
  top: "cccp1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "cccp1"
  top: "cccp1"
}
layer {
  name: "cccp2"
  type: "Convolution"
  bottom: "cccp1"
  top: "cccp2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "cccp2"
  top: "cccp2"
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "cccp2"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool0"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "cccp3"
  type: "Convolution"
  bottom: "conv2"
  top: "cccp3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "cccp3"
  top: "cccp3"
}
layer {
  name: "cccp4"
  type: "Convolution"
  bottom: "cccp3"
  top: "cccp4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "cccp4"
  top: "cccp4"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "cccp4"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "cccp5"
  type: "Convolution"
  bottom: "conv3"
  top: "cccp5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "cccp5"
  top: "cccp5"
}
layer {
  name: "cccp6"
  type: "Convolution"
  bottom: "cccp5"
  top: "cccp6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      mean: 0
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu9"
  type: "ReLU"
  bottom: "cccp6"
  top: "cccp6"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "cccp6"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
####category
layer {
  name: "fc5_category"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_category"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 26
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_category"
  type: "SoftmaxWithLoss"
  bottom: "fc5_category"
  bottom: "label_category"
}
layer {
  name: "accuracy_category"
  type: "Accuracy"
  bottom: "fc5_category"
  bottom: "label_category"
  top: "accuracy_category"
  include {
    phase: TEST
  }
}
####pattern
layer {
  name: "fc5_pattern"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_pattern"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 20
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_pattern"
  type: "SoftmaxWithLoss"
  bottom: "fc5_pattern"
  bottom: "label_pattern"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_pattern"
  type: "Accuracy"
  bottom: "fc5_pattern"
  bottom: "label_pattern"
  top: "accuracy_pattern"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
####neck
layer {
  name: "fc5_neck"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_neck"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 23
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_neck"
  type: "SoftmaxWithLoss"
  bottom: "fc5_neck"
  bottom: "label_neck"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_neck"
  type: "Accuracy"
  bottom: "fc5_neck"
  bottom: "label_neck"
  top: "accuracy_neck"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
####sleeve
layer {
  name: "fc5_sleeve"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_sleeve"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_sleeve"
  type: "SoftmaxWithLoss"
  bottom: "fc5_sleeve"
  bottom: "label_sleeve"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_sleeve"
  type: "Accuracy"
  bottom: "fc5_sleeve"
  bottom: "label_sleeve"
  top: "accuracy_sleeve"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
####fit
layer {
  name: "fc5_fit"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_fit"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 26
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_fit"
  type: "SoftmaxWithLoss"
  bottom: "fc5_fit"
  bottom: "label_fit"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_fit"
  type: "Accuracy"
  bottom: "fc5_fit"
  bottom: "label_fit"
  top: "accuracy_fit"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
####ideal_for
layer {
  name: "fc5_ideal_for"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_ideal_for"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_ideal_for"
  type: "SoftmaxWithLoss"
  bottom: "fc5_ideal_for"
  bottom: "label_ideal_for"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_ideal_for"
  type: "Accuracy"
  bottom: "fc5_ideal_for"
  bottom: "label_ideal_for"
  top: "accuracy_ideal_for"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
####occasion
layer {
  name: "fc5_occasion"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc5_occasion"
  # lr_mult is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 38
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_occasion"
  type: "SoftmaxWithLoss"
  bottom: "fc5_occasion"
  bottom: "label_occasion"
  loss_param {
      ignore_label: 0
  }
}
layer {
  name: "accuracy_occasion"
  type: "Accuracy"
  bottom: "fc5_occasion"
  bottom: "label_occasion"
  top: "accuracy_occasion"
  include {
    phase: TEST
  }
  accuracy_param {
      ignore_label: 0
  }
}
